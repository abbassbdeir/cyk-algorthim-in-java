import java.util.*;

public class CYKAlgorithm {

    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            // Prompt user to input grammar rules
            System.out.println("Enter the grammar rules (in CNF) in the format A->BC or A->a:");
            System.out.println("Type 'done' when finished.");
            Map<String, List<String>> grammar = new HashMap<>();
            String rule;
            while (!(rule = scanner.nextLine().trim()).equalsIgnoreCase("done")) {
                String[] parts = rule.split("->");
                String nonTerminal = parts[0].trim();
                String production = parts[1].trim();
                if (!grammar.containsKey(nonTerminal)) {
                    grammar.put(nonTerminal, new ArrayList<>());
                }
                grammar.get(nonTerminal).add(production);
            }

            // Prompt user to input the word to check
            System.out.println("Enter the word to check:");
            String word = scanner.nextLine().trim();

            // Check if the input word is empty
            if (word.isEmpty()) {
                System.out.println("Word is empty.");
                return;
            }

            // Perform CYK algorithm
            boolean[][][] table = new boolean[word.length()][word.length()][grammar.size()];
            for (int i = 0; i < word.length(); i++) {
                char letter = word.charAt(i);
                for (Map.Entry<String, List<String>> entry : grammar.entrySet()) {
                    String nonTerminal = entry.getKey();
                    for (String production : entry.getValue()) {
                        if (production.length() == 1 && production.charAt(0) == letter) {
                            table[i][i][getIndex(grammar, nonTerminal)] = true;
                        }
                    }
                }
            }

            for (int l = 2; l <= word.length(); l++) {
                for (int i = 0; i <= word.length() - l; i++) {
                    int j = i + l - 1;
                    for (int k = i; k < j; k++) {
                        for (Map.Entry<String, List<String>> entry : grammar.entrySet()) {
                            String nonTerminal = entry.getKey();
                            for (String production : entry.getValue()) {
                                if (production.length() == 2) {
                                    String left = production.substring(0, 1);
                                    String right = production.substring(1, 2);
                                    if (table[i][k][getIndex(grammar, left)] && table[k + 1][j][getIndex(grammar, right)]) {
                                        table[i][j][getIndex(grammar, nonTerminal)] = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // Check if the word is generated by the grammar
            if (table[0][word.length() - 1][getIndex(grammar, "S")]) {
                System.out.println("Word \"" + word + "\" is generated by the given grammar.");
            } else {
                System.out.println("Word \"" + word + "\" is not generated by the given grammar.");
            }
        }
    }

    private static int getIndex(Map<String, List<String>> grammar, String nonTerminal) {
        int index = 0;
        for (String key : grammar.keySet()) {
            if (key.equals(nonTerminal)) {
                return index;
            }
            index++;
        }
        return -1;
    }
}
